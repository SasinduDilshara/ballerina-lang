Test-Case: output
Description: Test `findAllGroups` function.
Labels: function-call-expr, regexp, findAllGroups, method-call-expr

import ballerina/lang.regexp;

function init() {
    string:RegExp regExpr1 = re `([a-z]ubble)`;
    regexp:Groups[] res1 = regExpr1.findAllGroups("rubble, bubble, hubbleAndnubble, abcd");
    io:println(res1.length() == 4); // @output true

    regexp:Groups res1GroupArr_1 = res1[0];
    regexp:Groups res1GroupArr_2 = res1[1];
    regexp:Groups res1GroupArr_3 = res1[2];
    regexp:Groups res1GroupArr_4 = res1[3];

    io:println(res1GroupArr_1.length() == 1); // @output true
    io:println(res1GroupArr_2.length() == 1); // @output true
    io:println(res1GroupArr_3.length() == 1); // @output true
    io:println(res1GroupArr_4.length() == 1); // @output true

    io:println(res1GroupArr_1[0].startIndex); // @output 0
    io:println(res1GroupArr_1[0].endIndex); // @output 6
    io:println(res1GroupArr_1[0].substring()); // @output rubble

    io:println(res1GroupArr_2[0].startIndex); // @output 8
    io:println(res1GroupArr_2[0].endIndex); // @output 14
    io:println(res1GroupArr_2[0].substring()); // @output bubble

    io:println(res1GroupArr_3[0].startIndex); // @output 16
    io:println(res1GroupArr_3[0].endIndex); // @output 22
    io:println(res1GroupArr_3[0].substring()); // @output hubble

    io:println(res1GroupArr_4[0].startIndex); // @output 25
    io:println(res1GroupArr_4[0].endIndex); // @output 31
    io:println(res1GroupArr_4[0].substring()); // @output nubble

    regexp:Groups[] res2 = regexp:findAllGroups(regExpr1, "rubble, bubble, hubbleAndnubble, abcd", 20);
    io:println(res2.length() == 1); // @output true

    regexp:Groups res2GroupArr_1 = res2[0];
    io:println(res2GroupArr_1.length() == 1); // @output true

    io:println(res2GroupArr_1[0].startIndex); // @output 25
    io:println(res2GroupArr_1[0].endIndex); // @output 31
    io:println(res2GroupArr_1[0].substring()); // @output nubble

    regexp:Groups[] res3 = re `([a-z]ubble)`.findAllGroups("rubble, bubble, hubbleAndnubble, abcd", 20);
    io:println(res3.length() == 1); // @output true

    regexp:Groups res3GroupArr_1 = res3[0];
    io:println(res3GroupArr_1.length() == 1); // @output true

    io:println(res3GroupArr_1[0].startIndex); // @output 25
    io:println(res3GroupArr_1[0].endIndex); // @output 31
    io:println(res3GroupArr_1[0].substring()); // @output nubble
}

Test-Case: output
Description: Test `findAllGroups` function at module level.
Labels: function-call-expr, regexp, findAllGroups, method-call-expr

import ballerina/lang.regexp;

string:RegExp regExpr1 = re `([a-z]ubble)`;
regexp:Groups[] res1 = regExpr1.findAllGroups("rubble, bubble, hubbleAndnubble, abcd");
regexp:Groups[] res2 = regexp:findAllGroups(regExpr1, "rubble, bubble, hubbleAndnubble, abcd", 20);
regexp:Groups[] res3 = re `([a-z]ubble)`.findAllGroups("rubble, bubble, hubbleAndnubble, abcd", 29);

function init() {
    io:println(res1.length() == 4); // @output true
    regexp:Groups res1GroupArr_1 = res1[0];
    regexp:Groups res1GroupArr_2 = res1[1];
    regexp:Groups res1GroupArr_3 = res1[2];
    regexp:Groups res1GroupArr_4 = res1[3];

    io:println(res1GroupArr_1.length() == 1); // @output true
    io:println(res1GroupArr_2.length() == 1); // @output true
    io:println(res1GroupArr_3.length() == 1); // @output true
    io:println(res1GroupArr_4.length() == 1); // @output true

    io:println(res1GroupArr_1[0].startIndex); // @output 0
    io:println(res1GroupArr_1[0].endIndex); // @output 6
    io:println(res1GroupArr_1[0].substring()); // @output rubble

    io:println(res1GroupArr_2[0].startIndex); // @output 8
    io:println(res1GroupArr_2[0].endIndex); // @output 14
    io:println(res1GroupArr_2[0].substring()); // @output bubble

    io:println(res1GroupArr_3[0].startIndex); // @output 16
    io:println(res1GroupArr_3[0].endIndex); // @output 22
    io:println(res1GroupArr_3[0].substring()); // @output hubble

    io:println(res1GroupArr_4[0].startIndex); // @output 25
    io:println(res1GroupArr_4[0].endIndex); // @output 31
    io:println(res1GroupArr_4[0].substring()); // @output nubble

    io:println(res2.length() == 1); // @output true
    regexp:Groups res2GroupArr_1 = res2[0];
    io:println(res2GroupArr_1.length() == 1); // @output true

    io:println(res2GroupArr_1[0].startIndex); // @output 25
    io:println(res2GroupArr_1[0].endIndex); // @output 31
    io:println(res2GroupArr_1[0].substring()); // @output nubble

    io:println(res3.length() == 0); // @output true
}

Test-Case: error
Description: Test `findAllGroups` function with negative range.
Labels: function-call-expr, regexp, findAllGroups, method-call-expr

import ballerina/lang.regexp;

function errorFunction() {
    var regExpr1 = re `Here`;
    string str1 = "MatchHereAndHere";

    regexp:Groups[] _ = regExpr1.findAllGroups(str1, -5); // @error index out of bound
}

Test-Case: output
Description: Test assignability of `findAllGroups` function result.

import ballerina/lang.regexp;

function init() {
    var regExpr1 = re `Here`;
    string str1 = "MatchHereAndHere";
    any result1 = regExpr1.findAllGroups(str1);
    io:println(result1 is regexp:Groups[]); // @output true

    var result2 = regExpr1.findAllGroups(str1, 10);
    io:println(result2 is regexp:Groups[]); // @output true

    var result3 = regExpr1.findAllGroups(str1, 14);
    io:println(result3 is regexp:Groups[]); // @output true
}

Test-Case: error
Description: Test assigning the result of `findAllGroups` function to an incompatible type.
Labels: function-call-expr, regexp, findAllGroups, method-call-expr

import ballerina/lang.regexp;

function errorFunction() {
    var regExpr1 = re `MatchHereAndHere`;
    string str1 = "Here";

    regexp:Span[] _ = regExpr1.findAllGroups(str1, 5); // @error expects a regexp:Span[], but findAllGroups() returns regexp:Groups[]

    regexp:Groups _ = regExpr1.findAllGroups(str1, 5); // @error expects a regexp:Groups, but findAllGroups() returns regexp:Groups[]

    int _ = regExpr1.findAllGroups(str1); // @error expects a int, but findAllGroups() returns regexp:Groups[]
}

Test-Case: error
Description: Test missing required parameters for `findAllGroups` method.
Labels: function-call-expr, regexp, findAllGroups, method-call-expr

import ballerina/lang.regexp;

function errorFunction() {
    var regExpr = re `regexp`;
    regexp:Groups[] _ = regExpr.findAllGroups(); // @error missing string argument

    regexp:Groups[] _ = regexp:findAllGroups(regExpr); // @error missing string argument

    regexp:Groups[] _ = regexp:findAllGroups(); // @error missing string:Regexp argument

    regexp:Groups[] _ = re `regexp`.findAllGroups(); // @error missing string argument
}

Test-Case: error
Description: Test passing invalid parameters to `findAllGroups()` method.
Labels: function-call-expr, regexp, findAllGroups, method-call-expr

import ballerina/lang.regexp;

function errorFunction() {
    var regExpr1 = re `Here`;

    regexp:Groups[] _ = regExpr1.findAllGroups(12); // @error int is not a subtype of string

    regexp:Groups[] _ = regExpr1.findAllGroups("MatchHereAndHere", "5"); // @error string is not a subtype of int
}

Test-Case: error
Description: Test passing too many parameters to `findAllGroups()` method.
Labels: function-call-expr, regexp, findAllGroups, method-call-expr

import ballerina/lang.regexp;

function errorFunction() {
    var regExpr1 = re `Here`;

    regexp:Groups[] _ = regExpr1.isFullMatch("MatchHereAndHere", 5, 1); // @error too many arguments
}
